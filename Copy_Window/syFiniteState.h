#pragma once
#include "syStd.h"

enum syBITMAPMARIO
{
	SY_FORWORD,
	SY_BACKWORD,
	SY_IDLEFORWORD,
	SY_IDLEBACKWORD,
	SY_DEAD,
	SY_COUNT
};



enum syBITMAPGUNTER
{
	STATE_FORWORD,
	STATE_BACKWORD,
	STATE_LANDINGFORWORD,
	STATE_LANDINGBACKWORD,
	STATE_JUMPINGFORWORD,
	STATE_JUMPINGBACKWORD,
	STATE_IDLEFORWORD,
	STATE_IDLEBACKWORD
};


enum syEvent 
{
	SYSTATE_TILECOLL, SYSTATE_PLAYERCOLL, SYSTATE_FINDTARGET, SYSTATE_LOSTTARGET, SYSTATE_DEAD, SYSTATE_COUNTER
};
enum syAction
{
	ACTION_MOVE,
	ACTION_STAND,
	ACTION_ATTACK,
	ACTION_DEAD,
	ACTION_COUNT
};

class syFsm;
class syFiniteState
{
	friend class syFsm;
public:
	syFiniteState();
	virtual ~syFiniteState();

public:
	typedef std::map<DWORD, DWORD>::iterator TItor;
	std::map<DWORD, DWORD>  m_List;
public:
	INT GetPtr(DWORD dwKey);
};

